{
  "summary": "## \ud83e\udde0 Project Summary: Modular Entity-Feature Architecture for SVG + Audio System\n\n### \ud83c\udf31 Core Concepts\n\n- **Entity-Feature System**:  \n  - `Entity` is a dynamic object that gains behaviors by attaching modular `Features`.\n  - Features are self-contained units of functionality.\n  - Entities act as *mini event hubs*, allowing attached features to interact via events.\n\n- **BaseObject**:  \n  - Common superclass for both `Entity` and `Feature`.\n  - Extends `EventTarget` to allow consistent event handling.\n  - Accepts an optional `type` string (e.g., \"entity\", \"feature\") for context-sensitive event logic.\n\n- **FeatureManager**:  \n  - Attached to each `Entity` to manage its features.\n  - Acts as a **conduit** for feature-related events: features emit to the manager, the manager relays/adapts to the entity.\n  - Reduces tight coupling and keeps a clean feature-to-entity communication boundary.\n  - Supports `add`, `remove`, and `has` for feature lifecycle.\n\n### \ud83e\udde9 Feature Lifecycle\n\n- **Features are Classes**, not mixins.\n  - When added to an entity, they're instantiated with `(entity, options)` and may register event listeners or expose methods.\n  - Each feature is responsible for registering and deregistering itself cleanly.\n\n- **Feature Aliases**:\n  - Entities can alias feature properties via `.features.alias(name, map)` for ergonomic access (e.g., `entity.notePitch` \u2192 `note.pitch`).\n\n- **Feature Registration**:\n  - Feature classes self-register their name (e.g., `NoteFeature` \u2192 `\"note\"`) to reduce boilerplate.\n\n### \ud83c\udf9b Audio Architecture\n\n- **AudioEngine**:\n  - Singleton-style interface over `AudioContext`.\n  - Owns and provides core audio infrastructure (e.g., context, clock, global nodes).\n  - Can provide `AudioFeature` instances to entities, rather than each entity creating its own.\n\n- **AudioFeature**:\n  - Integrates audio behavior into an entity (e.g., oscillator, gain, scheduling).\n  - Depends on the `AudioEngine` for its context.\n\n### \ud83c\udfa8 Graphics (SVG) Architecture\n\n- **GraphicsFeature**:\n  - Attaches SVG visuals (e.g., `SVGCircle`, `SVGRect`) to an entity.\n  - Uses document-managed SVG elements.\n\n- **SVGFretboard**:\n  - A composite visual class for displaying a guitar/bass fretboard.\n  - Lives in `/graphics/svg/`.\n  - Handles note layout and rendering logic.\n  - May be expanded with `SVGLayer`, `SVGScene`, etc.\n\n### \ud83e\udded Event Design\n\n- **Scoped Event Propagation**:\n  - Feature events are scoped to their entity.\n  - Entity may selectively emit feature-originated events outward.\n\n- **PubSub Possibility**:\n  - Entity acts as a mediator\u2014no global event bus is needed.\n\n### \ud83c\udfd7 Folder Structure\n\n```\n/src\n  /core\n    BaseObject.js\n    Entity.js\n    Feature.js\n    FeatureManager.js\n\n  /features\n    /audio\n      AudioFeature.js\n    /note\n      NoteFeature.js\n    /graphics\n      GraphicsFeature.js\n\n  /systems\n    AudioEngine.js\n\n  /graphics\n    /svg\n      SVGFretboard.js\n      SVGLayer.js\n      SVGNote.js\n\n  /utils\n    circleLooper.js\n    scheduler.js\n\n  /app\n    Application.js\n```\n\n### \ud83d\udd01 Utilities\n\n- **circleLooper**:\n  - General-purpose circular generator with optional index override.\n  - Wrapped in a `CircularIterator` class to support `.next()`, `.peekNext()`, and reset.\n  - Lives in `/utils/circleLooper.js`.\n\n### \ud83d\udd04 Design Principles & Philosophy\n\n- Keep modules **small, composable, and reactive** via events.\n- **Entity acts as a scope**, not a monolith.\n- Prefer **event-driven systems** with strict flow: `Feature \u2192 FeatureManager \u2192 Entity`.\n- Don\u2019t over-engineer; avoid adding systems like `Application` as entities unless truly justified.\n- `Application.use()` may be used for subsystem bootstrapping (optional)."
}